Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"
  config.vm.box_version = "20241002"
  
  # SSH 설정
  config.ssh.username = "vagrant"
  # config.ssh.password = "vagrant"  # 주석 처리 또는 제거
  config.ssh.insert_key = true      # 다시 true로 변경
  config.ssh.keys_only = true       # 다시 true로 변경
  # config.ssh.private_key_path = []  # 주석 처리 또는 제거
  config.ssh.verify_host_key = :accept_new  # 기본값으로 변경
  
  # 추가할 설정
  # config.vm.communicator = "ssh"
  # config.ssh.forward_agent = false
  # config.ssh.forward_x11 = false

  nodes = [
    {name: 'SERVER-0-ROUTER', adapters: [
      {net: "vboxnet1", ip: "192.168.1.250"},
      {net: "vboxnet2", ip: "192.168.2.250"},
      {net: "vboxnet3", ip: "192.168.3.250"},
      {net: "vboxnet4", ip: "192.168.4.250"},
      {net: "vboxnet5", ip: "192.168.5.250"}
    ], nat: true, ports: [2201]},

    {name: 'SERVER-1-WEB', adapters: [
      {net: "vboxnet1", ip: "192.168.1.10"}
    ], nat: true, port_forwarding: [
      {host: "127.0.0.1", host_port: 80, guest_ip: "192.168.1.10", guest_port: 80},
      {host: "127.0.0.1", host_port: 443, guest_ip: "192.168.1.10", guest_port: 443}
    ]},

    {name: 'SERVER-2-1-WAS1', adapters: [
      {net: "vboxnet2", ip: "192.168.2.10"}
    ]},

    {name: 'SERVER-2-2-WAS2', adapters: [
      {net: "vboxnet2", ip: "192.168.2.20"}
    ]},

    {name: 'SERVER-3-DB', adapters: [
      {net: "vboxnet3", ip: "192.168.3.10"}
    ]},

    {name: 'SERVER-4-Bastion', adapters: [
      {net: "vboxnet4", ip: "192.168.4.10"}
    ], nat: true, port_forwarding: [
      {host: "127.0.0.1", host_port: 22222, guest_ip: "192.168.4.10", guest_port: 22}
    ]},

    {name: 'SERVER-5-CICD', adapters: [
      {net: "vboxnet5", ip: "192.168.5.10"}
    ]},
  ]

  nodes.each do |node|
    config.vm.define node[:name], autostart: true do |machine|
      machine.vm.hostname = node[:name]

      machine.vm.provider "virtualbox" do |vb|
        vb.name = node[:name]
        vb.memory = "4096"
        vb.cpus = "4"
      end

      # NAT 및 기본 포트 포워딩 설정 (node[:ports]가 있을 경우만)
      if node[:nat] && node[:ports]
        Array(node[:ports]).each do |port|
          machine.vm.network "forwarded_port", guest: (port == 2201 ? 22 : port), host: port, auto_correct: true
        end
      end

      # 추가 포트 포워딩 설정 (node[:port_forwarding]가 있을 경우)
      if node[:port_forwarding]
        Array(node[:port_forwarding]).each do |pf|
          machine.vm.network "forwarded_port", guest: pf[:guest_port], host: pf[:host_port],
                                guest_ip: pf[:guest_ip], host_ip: pf[:host]
        end
      end

      node[:adapters].each do |adapter|
        machine.vm.network "private_network", ip: adapter[:ip], virtualbox__hostonly: adapter[:net]
      end
      
      # ★ 쉘 프로비저닝
      machine.vm.provision "shell", inline: <<-'SHELL'
        # SSH 설정 부분 수정
        sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
        sudo sed -i 's/PubkeyAuthentication no/PubkeyAuthentication yes/' /etc/ssh/sshd_config
        
        # SSH 서비스 재시작
        sudo systemctl restart ssh
        
        # 나머지 코드는 그대로 유지
        apt-get update -y || true
        apt-get upgrade -y || true

        # Docker 등 기본 패키지 설치 스크립트
        curl -fsSL https://raw.githubusercontent.com/Cybecho/Megazone_Bootcamp/main/install_package_all.sh | bash || true


        case "$(hostname)" in
          SERVER-0-ROUTER)
            echo 1 > /proc/sys/net/ipv4/ip_forward
            echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
            cat <<EOF > /etc/netplan/50-vagrant.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      addresses:
        - 192.168.1.250/24
    enp0s9:
      addresses:
        - 192.168.2.250/24
    enp0s10:
      addresses:
        - 192.168.3.250/24
    enp0s16:
      addresses:
        - 192.168.4.250/24
    enp0s17:
      addresses:
        - 192.168.5.250/24
EOF
            ;;
          SERVER-1-WEB)
            cat <<EOF > /etc/netplan/50-vagrant.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      addresses:
        - 192.168.1.10/24
      routes:
        - to: 192.168.0.0/16
          via: 192.168.1.250
EOF
            ;;
          SERVER-2-1-WAS1)
            cat <<EOF > /etc/netplan/50-vagrant.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      addresses:
        - 192.168.2.10/24
      routes:
        - to: 192.168.1.0/24
          via: 192.168.2.250
        - to: 192.168.3.0/24
          via: 192.168.2.250
        - to: 192.168.5.0/24
          via: 192.168.2.250
EOF
            ;;
          SERVER-2-2-WAS2)
            cat <<EOF > /etc/netplan/50-vagrant.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      addresses:
        - 192.168.2.20/24
      routes:
        - to: 192.168.1.0/24
          via: 192.168.2.250
        - to: 192.168.3.0/24
          via: 192.168.2.250
        - to: 192.168.5.0/24
          via: 192.168.2.250
EOF
            ;;
          SERVER-3-DB)
            cat <<EOF > /etc/netplan/50-vagrant.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      addresses:
        - 192.168.3.10/24
      routes:
        - to: 192.168.2.0/24
          via: 192.168.3.250
        - to: 192.168.5.0/24
          via: 192.168.3.250
EOF
            ;;
          SERVER-4-Bastion)
            cat <<EOF > /etc/netplan/50-vagrant.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      addresses:
        - 192.168.4.10/24
      routes:
        - to: 192.168.0.0/16
          via: 192.168.4.250
EOF
            ;;
          SERVER-5-CICD)
            cat <<EOF > /etc/netplan/50-vagrant.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      addresses:
        - 192.168.5.10/24
      routes:
        - to: 192.168.1.0/24
          via: 192.168.5.250
        - to: 192.168.2.0/24
          via: 192.168.5.250
        - to: 192.168.3.0/24
          via: 192.168.5.250
EOF
            ;;
        esac

        # 네트워크 설정 적용
        netplan apply || true

        # Docker 서비스 시작 및 자동 시작 설정
        systemctl start docker || true
        systemctl enable docker || true

        # ------------------------------------------------------------------
        # Docker 데몬에 insecure registry 설정 추가
        # 이 설정은 Docker가 설치된 후 적용되어야 함.
        # 아래 설정은 Docker가 192.168.5.10:5000 레지스트리에 대해
        # HTTPS 대신 HTTP를 사용하도록 허용함.
        # ------------------------------------------------------------------
        cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "insecure-registries": ["192.168.5.10:5000"]
}
EOF
        # 설정 반영을 위해 Docker 데몬 재시작
        sudo systemctl restart docker || true

        case "$(hostname)" in
          SERVER-1-WEB)
            echo "WEB 서버 설정 스크립트 실행 중..."
            # curl -fsSL https://raw.githubusercontent.com/Cybecho/Megazone_Bootcamp/main/on_premises_3tier_project/config_server_web.sh | sudo bash
            ;;
          SERVER-2-1-WAS1)
            echo "WAS 1 서버 설정 스크립트 실행 중..."
            # curl -fsSL https://raw.githubusercontent.com/Cybecho/Megazone_Bootcamp/main/on_premises_3tier_project/config_server_was1.sh | sudo bash
            ;;
          SERVER-2-2-WAS2)
            echo "WAS 2 서버 설정 스크립트 실행 중..."
            # curl -fsSL https://raw.githubusercontent.com/Cybecho/Megazone_Bootcamp/main/on_premises_3tier_project/config_server_was2.sh | sudo bash
            ;;
          SERVER-3-DB)
            echo "DB 서버 설정 스크립트 실행 중..."
            # curl -fsSL https://raw.githubusercontent.com/Cybecho/Megazone_Bootcamp/main/on_premises_3tier_project/config_server_db.sh | sudo bash
            ;;
        esac
      SHELL
    end
  end
end
